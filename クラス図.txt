1. 関連 (Association)
関連はクラス間の一般的な接続を示し、一方のクラスがもう一方のクラスのインスタンスをフィールドとして持つ場合に使用されます。

java
Copy code
public class ClassOne {
    // ClassOneのフィールドとメソッド
}

public class ClassTwo {
    private ClassOne classOne; // ClassTwoはClassOneと関連している

    public ClassTwo(ClassOne classOne) {
        this.classOne = classOne;
    }
    // ClassTwoのメソッド
}


2. 集約 (Aggregation)
集約は関連の一種で、全体と部分の関係を示しますが、部分は全体に対して生命期間が独立しています。

java
Copy code
public class Whole {
    private List<Part> parts; // 部分オブジェクトのリスト

    public Whole() {
        this.parts = new ArrayList<>();
    }

    public void addPart(Part part) {
        parts.add(part);
    }
}

public class Part {
    // Partのフィールドとメソッド
}


3. 合成 (Composition)
合成は集約よりも強い全体と部分の関係を示し、部分が全体に対して生命期間が依存しています。

java
Copy code
public class Whole {
    private final Part part; // Wholeが存在する限りPartも存在する

    public Whole() {
        this.part = new Part();
    }
}

public class Part {
    // Partのフィールドとメソッド
}


4. 依存 (Dependency)
依存は一方のクラスがもう一方のクラスに一時的に依存することを示します。これは通常、メソッドの引数、ローカル変数、または静的メソッドの呼び出しで表されます。

java
Copy code
public class ClassA {
    // ClassAのフィールドとメソッド
}

public class ClassB {
    public void someMethod(ClassA classA) {
        // ClassBのメソッドの中でClassAに依存している
    }
}


5. 継承 (Generalization)
継承は一方のクラスがもう一方のクラスの特別な形態であることを示します。サブクラスはスーパークラスのすべての公開されたメソッドとフィールドを継承します。

java
Copy code
public class SuperClass {
    // SuperClassのフィールドとメソッド
}

public class SubClass extends SuperClass {
    // SubClassで追加されたフィールドとメソッド
}


6. 実現 (Realization)
実現は一方のクラス（通常はインターフェース）がもう一方のクラスによって実現されることを示します。クラスはインターフェースに定義されたすべてのメソッドを実装する必要があります。

java
Copy code
public interface InterfaceA {
    void performAction();
}

public class ConcreteClass implements InterfaceA {
    @Override
    public void performAction() {
        // InterfaceAに定義されたperformActionメソッドの具体的な実装
    }
}




expected = IllegalArgumentException.class